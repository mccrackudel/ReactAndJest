{"version":3,"sources":["components/CardViewer.tsx","components/UserList.tsx","components/ControlPanel.tsx","utilities/data.ts","components/AddCardModal.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["CardViewer","card","answerRevealed","Col","Body","Title","Text","prompt","answer","UserList","users","setUsers","items","onChange","newUsers","LOCAL_STORAGE_USERS","INITIAL_USERS","id","text","ControlPanel","setCard","reveal","deck","showAddCardModal","useState","rawUsers","localStorage","getItem","JSON","parse","getLocalStorageUsers","Button","onClick","Math","floor","random","length","className","shuffledUsers","array","randomIndex","currentIndex","shuffle","setItem","stringify","variant","AddCardModal","visible","setVisible","addCard","setPrompt","setAnswer","hide","Modal","show","onHide","Header","closeButton","Form","Group","controlId","Label","Control","as","rows","value","ev","target","Footer","kind","App","CARDS","activeCard","setActiveCard","setDeck","Container","Row","newCard","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8bc091b0.chunk.js","sourcesContent":["import { Col, Card as BootstrapCard } from 'react-bootstrap';\r\nimport { Card } from '../interfaces/card';\r\n\r\nexport function CardViewer({ card, answerRevealed }:\r\n  { card: Card, answerRevealed: boolean }): JSX.Element {\r\n  return <Col>\r\n    <BootstrapCard>\r\n      <BootstrapCard.Body>\r\n        <BootstrapCard.Title>Card Viewer</BootstrapCard.Title>\r\n        <BootstrapCard.Text>\r\n          <strong>Prompt</strong>: {card.prompt}\r\n        </BootstrapCard.Text>\r\n        {answerRevealed && <BootstrapCard.Text>\r\n          <strong data-testid=\"answer-label\">Answer</strong>: {card.answer}\r\n        </BootstrapCard.Text>}\r\n      </BootstrapCard.Body>\r\n    </BootstrapCard>\r\n  </Col>\r\n}","import EditableDndList, { Task } from \"editable-dnd-list\";\r\n\r\n\r\nexport function UserList({users, setUsers}: {users: Task[], setUsers: (t: Task[])=>void}): JSX.Element {\r\n  \r\n\r\n  function handleChange(newUsers: Task[]): void {\r\n    setUsers(newUsers);\r\n  }\r\n\r\n  return <EditableDndList items={users} onChange={handleChange} />;\r\n}","import { Button, Col } from 'react-bootstrap';\r\nimport { Card } from '../interfaces/card';\r\nimport CARDS from '../assets/cards.json';\r\nimport { getRandomElement, shuffle } from '../utilities/data';\r\nimport { UserList } from './UserList';\r\nimport { useState } from 'react';\r\nimport { Task as User } from 'editable-dnd-list';\r\n\r\nexport const LOCAL_STORAGE_USERS = 'ta-trainer-users';\r\n\r\nexport const INITIAL_USERS: User[] = [\r\n  { id: '1', text: \"Dr. Bart\" },\r\n  { id: '2', text: \"Ada Bart\" },\r\n  { id: '3', text: \"Babbage Bart\" },\r\n  { id: '4', text: \"Pumpkin Bart\" },\r\n  { id: '5', text: \"Ellie Bart\" },\r\n];\r\n\r\nexport function getLocalStorageUsers(): User[] {\r\n  let rawUsers: string | null = localStorage.getItem(LOCAL_STORAGE_USERS);\r\n  if (rawUsers === null) {\r\n    return [...INITIAL_USERS];\r\n  } else {\r\n    return JSON.parse(rawUsers);\r\n  }\r\n}\r\n\r\nexport function ControlPanel({ setCard, reveal, answerRevealed, deck, showAddCardModal }:\r\n  {\r\n    setCard: (c: Card) => void, reveal: (r: boolean) => void, answerRevealed: boolean,\r\n    showAddCardModal: (b: boolean) => void, deck: Card[]\r\n  }): JSX.Element {\r\n  const [users, setUsers] = useState<User[]>(getLocalStorageUsers());\r\n\r\n\r\n  function setRandomCard() {\r\n    reveal(false);\r\n    setCard(getRandomElement(deck))\r\n  }\r\n\r\n  function shuffleUsers() {\r\n    let shuffledUsers: User[] = shuffle(users);\r\n    setUsers([...shuffledUsers]);\r\n  }\r\n\r\n  function save() {\r\n    localStorage.setItem(LOCAL_STORAGE_USERS, JSON.stringify(users));\r\n  }\r\n\r\n  function addNewCard() {\r\n    showAddCardModal(true);\r\n  }\r\n\r\n  return <Col>\r\n    <h1>Control Panel</h1>\r\n    <UserList users={users} setUsers={setUsers}></UserList>\r\n    <Button onClick={setRandomCard} className=\"m-4\">Swap Current Card</Button>\r\n    <Button data-testid=\"reveal-answer-button\" onClick={() => reveal(!answerRevealed)} className=\"m-4\">Reveal Answer</Button>\r\n    <Button onClick={shuffleUsers} className=\"m-4\">Shuffle Users</Button>\r\n    <Button onClick={save} className=\"m-4\" variant=\"success\">Save</Button>\r\n    <Button onClick={addNewCard} className=\"m-4\">Add new card</Button>\r\n\r\n  </Col>\r\n}","// https://stackoverflow.com/a/5915122/1718155\r\n/**\r\n * Grab a random element from a list\r\n * @param items Any kind of list \r\n * @returns One randomly chosen element\r\n */\r\nexport function getRandomElement<T>(items: T[]): T {\r\n  return items[Math.floor(Math.random()*items.length)];\r\n}\r\n\r\n// https://stackoverflow.com/a/2450976/1718155\r\n/**\r\n * Shuffles an array in-place\r\n * @param array Any array of elements\r\n * @returns The same array, shuffled (modified in-place)\r\n */\r\nexport function shuffle<T>(array: T[]): T[] {\r\n  let currentIndex = array.length,  randomIndex;\r\n\r\n  // While there remain elements to shuffle...\r\n  while (currentIndex !== 0) {\r\n\r\n    // Pick a remaining element...\r\n    randomIndex = Math.floor(Math.random() * currentIndex);\r\n    currentIndex--;\r\n\r\n    // And swap it with the current element.\r\n    [array[currentIndex], array[randomIndex]] = [\r\n      array[randomIndex], array[currentIndex]];\r\n  }\r\n\r\n  return array;\r\n}\r\n","import { useState } from \"react\";\r\nimport { Button, Form, Modal } from \"react-bootstrap\";\r\nimport { Card } from '../interfaces/card';\r\n\r\nexport function AddCardModal({visible, setVisible, addCard}: \r\n  {visible: boolean, setVisible: (b: boolean)=>void,\r\n  addCard: (c: Card) => void}): JSX.Element {\r\n    const [prompt, setPrompt] = useState<string>(\"PROMPT TEXT\");\r\n    const [answer, setAnswer] = useState<string>(\"ANSWER TEXT\");\r\n\r\n    function saveCard() {\r\n      addCard({\r\n        id: Math.random(),\r\n        kind: \"Custom\",\r\n        prompt, answer\r\n      });\r\n      setVisible(false);\r\n    }\r\n\r\n    const hide = () => setVisible(false);\r\n    return (\r\n    <Modal show={visible} onHide={hide}>\r\n      <Modal.Header closeButton>\r\n        <Modal.Title>Add New Card</Modal.Title>\r\n      </Modal.Header>\r\n\r\n      <Modal.Body>\r\n      <Form>\r\n        <Form.Group className=\"mb-3\" controlId=\"addCardForm.promptTextArea\">\r\n          <Form.Label>Prompt</Form.Label>\r\n          <Form.Control as=\"textarea\" rows={3}\r\n            value={prompt}\r\n            onChange={(ev: React.ChangeEvent<HTMLTextAreaElement>) => setPrompt(ev.target.value)}/>\r\n        </Form.Group>\r\n        <Form.Group className=\"mb-3\" controlId=\"addCardForm.answerTextArea\">\r\n          <Form.Label>Suggested Answer</Form.Label>\r\n          <Form.Control as=\"textarea\" rows={3} \r\n            value={answer}\r\n            onChange={(ev: React.ChangeEvent<HTMLTextAreaElement>) => setAnswer(ev.target.value)}/>\r\n        </Form.Group>\r\n      </Form>\r\n      </Modal.Body>\r\n\r\n      <Modal.Footer>\r\n        <Button variant=\"secondary\" onClick={hide}>Close</Button>\r\n        <Button variant=\"primary\" onClick={saveCard}>Save changes</Button>\r\n      </Modal.Footer>\r\n    </Modal>)\r\n}","import React, { useState } from 'react';\r\nimport './App.css';\r\nimport CARDS from './assets/cards.json';\r\nimport { CardViewer } from './components/CardViewer';\r\nimport { ControlPanel } from './components/ControlPanel';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { Container, Row } from 'react-bootstrap';\r\nimport { Card } from './interfaces/card';\r\nimport { AddCardModal } from './components/AddCardModal';\r\n\r\nfunction App(): JSX.Element {\r\n  const [activeCard, setActiveCard] = useState<Card>(CARDS[0] as Card);\r\n  const [answerRevealed, reveal] = useState<boolean>(false);\r\n  const [visible, setVisible] = useState<boolean>(false);\r\n  const [deck, setDeck] = useState<Card[]>(CARDS);\r\n\r\n  function addCard(newCard: Card) {\r\n    setDeck([...deck, newCard]);\r\n  }\r\n\r\n  return (\r\n    <Container className=\"App\">\r\n      <Row>\r\n        <ControlPanel\r\n          showAddCardModal={setVisible}\r\n          setCard={setActiveCard}\r\n          reveal={reveal}\r\n          deck={deck}\r\n          answerRevealed={answerRevealed}></ControlPanel>\r\n        <CardViewer card={activeCard} answerRevealed={answerRevealed}></CardViewer>\r\n        <AddCardModal visible={visible} setVisible={setVisible}\r\n          addCard={addCard}></AddCardModal>\r\n      </Row>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}